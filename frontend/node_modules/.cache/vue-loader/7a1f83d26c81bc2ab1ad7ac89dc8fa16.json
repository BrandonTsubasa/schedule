{"remainingRequest":"/Users/tsubasa/project/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tsubasa/project/frontend/src/views/auth/SignIn.vue?vue&type=style&index=0&id=2758517f&scoped=true&lang=css&","dependencies":[{"path":"/Users/tsubasa/project/frontend/src/views/auth/SignIn.vue","mtime":1630509455540},{"path":"/Users/tsubasa/project/frontend/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/tsubasa/project/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tsubasa/project/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tsubasa/project/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojU2lnbkluIHsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7Cn0K"},{"version":3,"sources":["SignIn.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyOA;AACA;AACA;AACA","file":"SignIn.vue","sourceRoot":"src/views/auth","sourcesContent":["<template>\n  <div id=\"SignIn\" class=\"mt-5\">\n    <v-card\n      :tile=\"$vuetify.breakpoint.sm || $vuetify.breakpoint.xs\"\n      class=\"mx-auto\"\n      flat\n      max-width=\"640\"\n    >\n      <v-card-title class=\"text-center pa-8\">\n        <h4>{{ words.signIn.title }}</h4>\n      </v-card-title>\n      <v-divider></v-divider>\n\n      <div class=\"px-6 py-8\">\n        <div style=\"max-width: 344px\" class=\"mx-auto\">\n          <div>\n            <v-row>\n              <v-col>\n                <v-btn\n                  class=\"text-capitalize caption primary lighten-1 white--text font-weight-bold\"\n                  height=\"48px\"\n                  width=\"100%\"\n                  outlined\n                  style=\"border-color: #979797\"\n                  tile\n                  @click=\"guestCreate\"\n                >\n                  {{ words.signIn.guest }}\n                </v-btn>\n              </v-col>\n            </v-row>\n\n            <v-row>\n              <v-col>\n                <v-divider></v-divider>\n              </v-col>\n            </v-row>\n\n            <ValidationObserver ref=\"obs\" v-slot=\"ObserverProps\">\n              <v-row class=\"regist_info pt-6\">\n                <v-col>\n                  <ValidationProvider\n                    :rules=\"totalPages.validateNames().requiredEmail\"\n                    v-slot=\"{ errors }\"\n                    :name=\"words.signIn.mail\"\n                  >\n                    <v-text-field\n                      v-model=\"email\"\n                      dense\n                      height=\"48px\"\n                      outlined\n                      required\n                      :error-messages=\"errors\"\n                      :label=\"words.signIn.mail\"\n                    ></v-text-field>\n                  </ValidationProvider>\n\n                  <ValidationProvider\n                    :rules=\"totalPages.validateNames().requiredPassword\"\n                    v-slot=\"{ errors }\"\n                    :name=\"words.signIn.password\"\n                  >\n                    <v-text-field\n                      v-model=\"password\"\n                      dense\n                      height=\"48px\"\n                      :append-icon=\"showPassword ? 'mdi-eye' : 'mdi-eye-off'\"\n                      :type=\"showPassword ? 'text' : 'password'\"\n                      outlined\n                      required\n                      :label=\"words.signIn.password\"\n                      :error-messages=\"errors\"\n                      @click:append=\"showPassword = !showPassword\"\n                    ></v-text-field>\n                  </ValidationProvider>\n\n                  <v-btn\n                    class=\"caption\"\n                    color=\"#049cfc\"\n                    depressed\n                    height=\"48px\"\n                    width=\"100%\"\n                    tile\n                    :disabled=\"!ObserverProps.valid\"\n                    @click=\"login\"\n                  >\n                    {{ words.signIn.login }}\n                  </v-btn>\n                </v-col>\n              </v-row>\n            </ValidationObserver>\n\n            <v-row>\n              <v-col>\n                <v-divider></v-divider>\n                <p @click=\"signUpSwitch\">\n                  <span class=\"blue--text\">{{ words.signIn.signUp }}</span>\n                  {{ words.signIn.message }}\n                </p>\n              </v-col>\n            </v-row>\n          </div>\n        </div>\n      </div>\n    </v-card>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport totalPages from \"@/common/totalPages.js\";\nimport totalApis from \"@/common/totalApis.js\";\nimport words from \"@/words/words.json\";\n\nexport default {\n  name: \"SignIn\",\n  data: () => ({\n    words: words,\n    totalPages: totalPages,\n    email: null,\n    password: null,\n    showPassword: false,\n    guestName: null,\n    guestEmail: null,\n    guestPassword: null,\n  }),\n  methods: {\n    signUpSwitch: function () {\n      this.$router.push(totalPages.menuPages().SignUp);\n    },\n    login() {\n      axios({\n        method: \"post\",\n        url: totalApis.apis().token,\n        data: {\n          email: this.email,\n          password: this.password,\n        },\n      })\n        .then((response) => {\n          const status = response?.status;\n          const result = response?.data;\n          console.log(response);\n          if (status == 200) {\n            localStorage.setItem(\"JWT\", result.token);\n            console.log(localStorage.getItem(\"JWT\"));\n            this.getMyself();\n          } else {\n            console.log(response);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n      this.email = \"\";\n      this.password = \"\";\n    },\n    getMyself: function () {\n      axios({\n        method: \"get\",\n        url: totalApis.apis().userMyself,\n        headers: {\n          Authorization: `JWT ${localStorage.getItem(\"JWT\")}`,\n        },\n      })\n        .then((response) => {\n          const userData = response?.data;\n          localStorage.setItem(\"userName\", userData.name);\n          console.log(localStorage.getItem(\"userName\"));\n          localStorage.setItem(\"userId\", userData.id);\n          console.log(localStorage.getItem(\"userId\"));\n          this.$router.push(\"/\");\n        })\n        .catch(function (error) {\n          this.tokenRefresh();\n          console.log(error);\n        });\n    },\n    guestCreate: function () {\n      // ゲストユーザーのemail, name, passwordをランダムで生成\n      this.guestEmail = Math.random().toString(32).substring(2) + \"@example.com\";\n      const num = parseInt(Math.random() * 10000);\n      this.guestName = \"ゲストユーザー\" + num;\n      this.guestPassword =\n        Math.random().toString(32).substring(2) + parseInt(Math.random() * 100);\n\n      axios({\n        method: \"post\",\n        url: totalApis.apis().userCreate,\n        data: {\n          name: this.guestName,\n          email: this.guestEmail,\n          password: this.guestPassword,\n        },\n      })\n        .then((response) => {\n          console.log(response);\n          this.guestLogin();\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n    guestLogin: function () {\n      axios({\n        method: \"post\",\n        url: totalApis.apis().token,\n        data: {\n          name: this.guestName,\n          email: this.guestEmail,\n          password: this.guestPassword,\n        },\n      })\n        .then((response) => {\n          console.log(response);\n          const status = response?.status;\n          const result = response?.data;\n          if (status === 200) {\n            localStorage.setItem(\"JWT\", result.token);\n            this.getMyself();\n          } else {\n            console.log(response);\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n  },\n};\n</script>\n\n<style scoped>\n#SignIn {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"]}]}